<chapter xml:id="ch_logic">
    <title>Logic</title>

    <introduction>
        <p>
            Logic is, basically, the study of valid reasoning. When searching the internet, we use Boolean logic – terms like <q>and</q> and <q>or</q> – to help us find specific web pages that fit in the sets we are interested in. After exploring this form of logic, we will look at logical arguments and how we can determine the validity of a claim.
        </p>
    </introduction>

    <section xml:id="sec_boolean">  <!-- COMPLETE 11/28/2020 -->
        <title>Boolean Logic</title>

        <objectives>
            <ol>
                <li><p>Use and interpret Boolean logic expressions.</p></li>
            </ol>
        </objectives>

        <p>
            We can often classify items as belonging to sets. If you went the library to search for a book and they asked you to express your search using unions, intersections, and complements of sets, that would feel a little strange. Instead, we typically using words like <q>and</q>, <q>or</q>, and <q>not</q> to connect our keywords together to form a search. These words, which form the basis of <term>Boolean logic</term>, are directly related to our <xref ref="sec_setoperations" text="custom">set operations</xref>. (Boolean logic was developed by the 19<sup>th</sup>-century English mathematician George Boole.)
        </p>

        <definition xml:id="def_boolean">
            <title>Boolean Logic</title>
            <statement>
                <p>
                    Boolean logic combines multiple statements that are either true or false into an expression that is either true or false.
                </p>
                <p>
				    In connection to sets, a search is true if the element is part of the set.
		    	</p>    
            </statement>
        </definition>

        <video youtube="ZOLinnoXEAw"/>

        <p>
            Suppose <em>M</em> is the set of all mystery books, and <em>C</em> is the set of all comedy books. If we search for <q>mystery</q>, we are looking for all the books that are an element of the set <em>M</em>; the search is true for books that are in the set.
        </p>

        <p>
            When we search for <q>mystery <em>and</em> comedy</q>, we are looking for a book that is an element of both sets, in the intersection. If we were to search for <q>mystery <em>or</em> comedy</q>, we are looking for a book that is a mystery, a comedy, or both, which is the union of the sets. If we searched for <q><em>not</em> comedy</q>, we are looking for any book in the library that is not a comedy, the complement of the set <em>C</em>.
        </p>

        <definition xml:id="def_connectives">
            <title>Connection to Set Operations</title>
            <statement>
                <p>
                    <md>
                        <mrow>A\text{ and }B &amp;&amp; \text{elements in the intersection } A\cap B</mrow>
                        <mrow>A\text{ or }B &amp;&amp; \text{elements in the union } A\cup B</mrow>
                        <mrow>\text{not }A &amp;&amp; \text{elements in the complement } A^c</mrow>
                   </md>
                </p>
            </statement>
        </definition>

        <video youtube="7tm-sDKCnO4"/>

        <p>
            Notice here that <em>or</em> is not exclusive. This is a difference between the Boolean logic use of the word and common everyday use. When your significant other asks <q>do you want to go to the park or the movies?</q> they usually are proposing an exclusive choice – one option or the other, but not both. In Boolean logic, the <em>or</em> is not exclusive – more like being asked at a restaurant <q>would you like fries or a drink with that?</q> Answering <q>both, please</q> is an acceptable answer.
        </p>

        <remark xml:id="ex_boolean1">
            <p>
				Suppose we are searching a library database for Mexican universities. Express a reasonable search using Boolean logic.
			</p>

			<p>
				We could start with the search <q>Mexico <em>and</em> university</q>, but would be likely to find results for the U.S. state New Mexico. To account for this, we could revise our search to read:
			</p>

			<p>
				Mexico <em>and</em> university <em>not</em> <q>New Mexico</q>
			</p>
        </remark>

        <remark xml:id="ex_boolean2">
            <p>
				Describe the numbers that meet the condition:
			</p>

			<p>
				even <em>and</em> less than 10 <em>and</em> greater than 0.
			</p>

            <p>
				The numbers that satisfy all three requirements are <m>\{2, 4, 6, 8\}</m>.
			</p>
        </remark>

        <p>
				Sometimes statements made in English can be ambiguous. For this reason, Boolean logic uses parentheses to show precedence, just like in algebraic order of operations.
        </p>

        <remark xml:id="ex_boolean3">
            <p>
				Describe the numbers that meet the condition:
			</p>

			<p>
				odd number <em>and</em> less than 20 <em>and</em> greater than 0 <em>and</em> (multiple of 3 <em>or</em> multiple of 5).
			</p>

            <p>
				The first three conditions limit us to the set <m>\{1, 3, 5, 7, 9, 11, 13, 15, 17, 19\}</m>.
			</p>

			<p>
				The last grouped conditions tell us to find elements of this set that are also either a multiple of 3 or a multiple of 5. This leaves us with the set <m>\{3, 5, 9, 15\}</m>.
			</p>

            <p>
				Notice that we would have gotten a very different result if we had written
			</p>

			<p>
				(odd number <em>and</em> less than 20 <em>and</em> greater than 0 <em>and</em> multiple of 3) <em>or</em> multiple of 5.
			</p>

			<p>
				The first grouped set of conditions would give <m>\{3, 9, 15\}</m>. When combined with the last condition, though, this set expands without limits:
			    <me>
				\{3, 5, 9, 15, 20, 25, 30, 35, 40, 45, \ldots\}.
                </me>
			</p>
        </remark>

        <remark xml:id="ex_boolean4">
            <p>
				The English phrase <q>Go to the store and buy me eggs and bagels or cereal</q> is ambiguous; it is not clear whether the requestors is asking for eggs always along with either bagels or cereal, or whether they’re asking for either the combination of eggs and bagels, or just cereal.
			</p>

			<p>
				For this reason, using parentheses clarifies the intent:
			

			<md>
                <mrow>
				    \text{Eggs and (bagels or cereal) } &amp;\text{means}&amp; \text{Option 1: Eggs and bagels, Option 2: Eggs and cereal}</mrow>
                <mrow>
				    \text{(Eggs and bagels) or cereal } &amp;\text{means}&amp; \text{Option 1: Eggs and bagels, Option 2: Cereal}</mrow>
            </md>
			</p>
        </remark>

        <p>
            Be aware that when a string of conditions is written without grouping symbols, it is often interpreted from the left to right, resulting in the latter interpretation.
        </p>

        <exercises xml:id="exercises_boolean">
            <p>For questions 1-2, list the set of integers that satisfy the given conditions.</p>

            <exercise>
                <statement>
                    <p>
                         A positive multiple of 5 and not a multiple of 2.
                    </p>
                </statement>
                <answer>
                    <p>
                       <m>\{5, 15, 25, \ldots \}</m>.
                    </p>
                </answer>
            </exercise>

            <exercise>
                <statement>
                    <p>
                         Greater than 12 and less than or equal to 18.
                    </p>
                </statement>
            </exercise>

        </exercises>

    </section>

    <section xml:id="sec_conditional">
        <title>Conditional Statements</title>

        <objectives> <!-- Added MS -->
            <ol>
                <li>
                    <p>
                        Identify, and write spreadsheet formulas that implement, conditional statements.
                    </p>
                </li>
            </ol>
        </objectives>
        

        <p>
				Beyond searching, Boolean logic is commonly used in spreadsheet applications like <em>Excel</em> to do conditional calculations. A <term>statement</term> is something that is either true or false. A statement like <m>3 \lt 5</m> is true; a statement like <q>a rat is a fish</q> is false. A statement like <q><m>x \lt 5</m></q> is true for some values of <em>x</em> and false for others. When an action is taken or not depending on the value of a statement, it forms a <term>conditional</term>.
        </p>

        <definition xml:id="def_conditional">
            <title>Statements and Conditionals</title>
            <statement>
            <p>
				A <term>statement</term> is either true or false.
			</p>

			<p>
				A <term>conditional</term> is a compound statement of the form
			</p>

			<p>
				<q>if <em>p</em> then <em>q</em></q> or <q>if <em>p</em> then <em>q</em>, else <em>s</em></q>.
			</p>
            </statement>
        </definition>

        <video youtube="oEr27P1bX9o"/>

        <remark xml:id="ex_conditional1">
            <statement>
                <p>
                    In common language, an example of a conditional statement would be <q>If it is raining, then we’ll go to the mall. Otherwise we’ll go for a hike.</q>
			    </p>

			    <p>
                    The statement <q>If it is raining</q> is the condition – this may be true or false for any given day. If the condition is true, then we will follow the first course of action, and go to the mall. If the condition is false, then we will use the alternative, and go for a hike.
			    </p>
            </statement>
        </remark>   

        <video youtube="iKN-QpBLkyM"/>

        <remark xml:id="ex_conditional2">
            <p>
				As mentioned earlier, conditional statements are commonly used in spreadsheet applications like Excel or Google Sheets. In Excel, you can enter an expression like
			</p>

			<c>
				=IF(A1&lt;2000, A1+1, A1*2)
			</c>.

			<p>
				Notice that after the IF, there are three parts. The first part is the condition, and the second two are calculations. Excel will look at the value in cell A1 and compare it to 2000. If that condition is true, then the first calculation is used, and 1 is added to the value of A1 and the result is stored. If the condition is false, then the second calculation is used, and A1 is multiplied by 2 and the result is stored.
			</p>

			<p>
				In other words, this statement is equivalent to saying <q>If the value of A1 is less than 2000, then add 1 to the value in A1. Otherwise, multiply A1 by 2</q>.
			</p>
        </remark>

        <remark xml:id="ex_conditional3">
            <p>
				The expression <c>=IF(A1&gt;5, 2*A1, 3*A1)</c> is used. Find the result if A1 is 3, and the result if A1 is 8.
			</p>

			<p>
				This is equivalent to saying
			</p>

			<p>
				If A1 &gt; 5, then calculate 2*A1. Otherwise, calculate 3*A1.
			</p>

			<p>
				If A1 is 3, then the condition is false, since 3 &gt; 5 is not true, so we do the alternate action, and multiply by 3, giving 3*3 = 9.
			</p>

			<p>
				If A1 is 8, then the condition is true, since 8 &gt; 5, so we multiply the value by 2, giving 2*8=16.
			</p>
        </remark>

        <remark xml:id="ex_conditional4">
            <p>
				An accountant needs to withhold 15% of income for taxes if the income is below $30,000, and 20% of income if the income is $30,000 or more. Write an expression that would calculate the amount to withhold.
			</p>

			<p>
				Our conditional needs to compare the value to 30,000. If the income is less than 30,000, we need to calculate 15% of the income: 0.15*income. If the income is more than 30,000, we need to calculate 20% of the income: 0.20*income.
			</p>

			<p>
				In words we could write <q>If income &lt; 30,000, then multiply by 0.15, otherwise multiply by 0.20</q>. In Excel, we would write:
			</p>

			<p>
				<c>=IF(A1&lt;30000, 0.15*A1, 0.20*A1)</c>
			</p>
        </remark>

        <p>
            As we did earlier, we can create more complex conditions by using the operators <em>and</em>, <em>or</em>, and <em>not</em> to join simpler conditions together.
        </p>

        <remark xml:id="ex_conditional5">
            <p>
				A parent might say to their child <q>if you clean your room and take out the garbage, then you can have ice cream.</q>
			</p>

			<p>
				Here, there are two simpler conditions:
			</p>

			<p>
				1) The child cleaning her room
			</p>

			<p>
				2) The child taking out the garbage
			</p>

			<p>
				Since these conditions were joined with <em>and</em>, the combined conditional will be true only if both simpler conditions are true; if either chore is not completed, then the parent’s condition is not met.
			</p>

			<p>
				Notice that if the parent had said <q>if you clean your room <em>or</em> take out the garbage, then you can have ice cream</q>, then the child would need to complete only one chore to meet the condition.
			</p>
        </remark>

        <p>
            Suppose you wanted to have something happen when a certain value is between 100 and 300. To create the condition <q>A1 &lt; 300 and A1 &gt; 100</q> in Excel, you would need to enter <c>AND(A1&lt;300, A1&gt;100)</c>. Likewise, for the condition <q>A1=4 or A1=6</q> you would enter <c>OR(A1=4, A1=6)</c>.
        </p>

        <remark xml:id="ex_conditional6">
            <p>
				In a spreadsheet, cell A1 contains annual income, and A2 contains number of dependents.
			</p>

			<p>
				A certain tax credit applies if someone with no dependents earns less than $10,000, or if someone with dependents earns less than $20,000. Write a rule that describes this.
			</p>

			<p>
				There are two ways the rule is met:
			</p>

			<p>
				income is less than 10,000 <em>and</em> dependents is 0, <em>or</em>
			</p>

			<p>
				income is less than 20,000 <em>and</em> dependents is not 0.
			</p>

			<p>
				Informally, we could write these as
			</p>

			<p>
				(A1 &lt; 10000 <em>and</em> A2 = 0) <em>or</em> (A1 &lt; 20000 <em>and</em> A2 &gt; 0)
			</p>

			<p>
				In Excel’s format, we’d write
			</p>

			<p>
				<c>IF(OR(AND(A1&lt;10000, A2=0), AND(A1&lt;20000, A2&gt;0)), "you qualify", "you don’t qualify")
			</c>.</p>
        </remark>

    </section>

    <section xml:id="sec_quantified">
        <title>Quantified Statements</title>
        
    </section>

    <section xml:id="sec_truthtables1">
        <title>Truth Tables I</title>
        
    </section>    

    <section xml:id="sec_truthtables2">
        <title>Truth Tables II</title>
        
    </section>

    <section xml:id="sec_demorgan">
        <title>De Morgan's Laws</title>
        
    </section>  

     <section xml:id="sec_arguments">
        <title>Arguments and Fallacies</title>
        
    </section>   

</chapter>